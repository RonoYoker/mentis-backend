name: rbl-uat-CD

on:
  push:
    # Publish `uat-rbl-1.2.3` tags as releases.
    tags:
      - uat-rbl*
env:
  ECR_REPO_URL: ${{ secrets.RBL_PROD_ECR_REPO }}
  DOCKER_COMPOSE_FILE: docker-compose-local-uat.yml
  HEALTHCHECK_URL: http://localhost:8080/ping
  AWS_REGION: ${{ secrets.PROD_AWS_REGION }}
  ECR_REPOSITORY: uat-onyx
  ECS_SERVICE: uat-onyx-svc
  ECS_CLUSTER: uat-services-cls
  ECS_TASK_DEFINITION: .aws/uat/task-definition-rbl.json
  CONTAINER_NAME: uat-onyx
  BANK_NAME: rbl
  CURR_ENV: uat

jobs:
  ecr-repo-creation:
    runs-on: rbl-deploy-server

    steps:
      - name: create ECR repository
        env:
          aws_region: ${{ secrets.PROD_AWS_Region }}
          ECR_REPOSITORY: uat-onyx
        run: |
          echo "== START CREATE REPO"
          echo "== CHECK REPO EXISTS"
          set +e
          output=`aws ecr describe-repositories --region $aws_region --repository-names $ECR_REPOSITORY 2>&1`
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            if echo $output | grep -q RepositoryNotFoundException; then
              echo "== REPO DOESN'T EXIST, CREATING.."
              aws ecr create-repository --region $aws_region --repository-name $ECR_REPOSITORY
              echo "== FINISHED CREATE REPO"
            else
              >&2 echo $output
            fi
          else
            echo "== REPO EXISTS, SKIPPING CREATION.."
          fi
          set -e

  build-test-push:
    needs: ecr-repo-creation

    runs-on: rbl-deploy-server

    steps:
      - uses: actions/checkout@v2

      - name: Get the version
        id: get_version
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT


      - name: Build docker images
        env:
          ECR_REPOSITORY: uat-onyx
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |
          sudo docker build -t $ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG --build-arg BANK_NAME=${{ env.BANK_NAME }} --build-arg CURR_ENV=${{ env.CURR_ENV }} -f Dockerfile .
      

      - name: Healthcheck test
        env:
          ECR_REPOSITORY: uat-onyx
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |
            TAG=$ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG docker-compose --file $DOCKER_COMPOSE_FILE up -d
            sleep 10
              output=`curl -o /dev/null -s -w "%{http_code}\n" $HEALTHCHECK_URL`

                    if [ "$output" == "200" ]
                    then
                        echo "test success"
                    else
                        echo "test case failed"
                        TAG=$ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG docker-compose --file $DOCKER_COMPOSE_FILE down
                        exit 1
                    fi
            TAG=$ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG docker-compose --file $DOCKER_COMPOSE_FILE down


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RBL_PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RBL_PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.PROD_AWS_Region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: uat-onyx
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |
          sudo docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build-test-push

    runs-on: rbl-deploy-server

    steps:

      - name: Get the version
        id: get_version
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      - name: Get Latest Task Definition
        run: |
            OLD_TASK_DEF=$(aws ecs describe-task-definition --task-definition $CONTAINER_NAME)
            FINAL_TASK=$(echo $OLD_TASK_DEF | jq '.taskDefinition|{family: .family, networkMode: .networkMode, volumes: .volumes, containerDefinitions: .containerDefinitions, taskRoleArn: .taskRoleArn, executionRoleArn: .executionRoleArn, requiresCompatibilities: .requiresCompatibilities, cpu: .cpu, memory: .memory}')
            echo $FINAL_TASK > ${{ env.ECS_TASK_DEFINITION }}


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REPO_URL }}/${{ env.ECR_REPOSITORY }}:${{ steps.get_version.outputs.VERSION }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.10
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
